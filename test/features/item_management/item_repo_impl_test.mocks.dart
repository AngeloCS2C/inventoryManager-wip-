// Mocks generated by Mockito 5.4.4 from annotations
// in task/test/features/item_management/item_repo_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task/features/item_management/data/data_source/item_remote_datasource.dart'
    as _i2;
import 'package:task/features/item_management/domain/entities/item.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ItemRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemRemoteDataSource extends _i1.Mock
    implements _i2.ItemRemoteDataSource {
  MockItemRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createItem(_i4.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #createItem,
          [item],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.Item?> getItemById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getItemById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Item?>.value(),
      ) as _i3.Future<_i4.Item?>);

  @override
  _i3.Future<List<_i4.Item>> getAllItems({
    String? searchQuery,
    String? filterCategory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllItems,
          [],
          {
            #searchQuery: searchQuery,
            #filterCategory: filterCategory,
          },
        ),
        returnValue: _i3.Future<List<_i4.Item>>.value(<_i4.Item>[]),
      ) as _i3.Future<List<_i4.Item>>);

  @override
  _i3.Future<void> updateItem(_i4.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [item],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  dynamic fetchItemById(String? id) => super.noSuchMethod(Invocation.method(
        #fetchItemById,
        [id],
      ));
}
